physical:
  robot_diameter: 0.08 # Agent diameter in meters
control:
  turn_threshold: 8 # The min angle difference in degrees between the desired and current orientation to start turning
  turn_speed_ratio: 0.1 # The ratio of the maximum speed of the motors to use when turning
  360_degrees_steps: 360 # The number of steps we divide the 360 degrees in when deciding the free directions
  object_safety_radius: 0.1 # The safety radius around an object in meters
  agent_safety_radius_margin: 0.1 # The margin around the agent's safety radius in meters
  disallow_frontier_switching:
    frontier_reach_distance: 0.5 # The distance in meters when we consider a frontier reached
    target_feasibility_check_interval: 5 # The time in seconds between target feasibility checks
  separate_frontiers:
    distance_threshold: 1.0 # The distance in meters between two frontiers to consider them separate
communication:
  agent_info_relevant: 10 # The time in seconds received information from another agent is relevant in the agent's decision making
  quadtree_exchange_interval: 5 # The time in seconds between quadtree exchanges
  time_sync_interval: 10 # The time in seconds between time synchronization
forces:
  frontier_search_radius: 4.0 # The radius in meters around the agent to search for frontiers
  agent_avoidance_radius: 0.68 # The radius in meters around the agent to avoid other agents
  agent_cohesion_radius: 1.5 # The radius in meters around the agent to align with other agents
  agent_alignment_radius: 1.5 # The radius in meters around the agent to align with other agents
  object_avoidance_radius_margin: 0.2 # The margin around the object's safety radius in meters (to be added to agent_safety_radius + object_safety_radius))
  virtual_wall_avoidance_weight: 1.1 # The weight of the virtual wall avoidance force
  agent_cohesion_weight: 0 # The weight of the agent cohesion force
  agent_avoidance_weight: 1.15 # The weight of the agent avoidance force
  agent_alignment_weight: 0 # The weight of the agent alignment force
  target_weight: 0.3 # The weight of the target (frontier or subtarget) force
  frontier_fitness:
    distance_weight: 0 # The weight of the euclidean distance to the target in the fitness function
    size_weight: 1 # The weight of the size of the frontier in the fitness function
    reach_battery_weight: 8 # The weight of battery usage to reach the frontier in the fitness function
    reach_duration_weight: 1 # The weight of the time to reach the frontier in the fitness function
    pheromone_weight: 500 # The weight of the pheromone value in the fitness function
confidence:
  p_free: 0.6 # The probability of an observed free cell being free
  p_occupied: 0.4 # The probability of an observed occupied cell being not free
  alpha_receive: 0.1 # The factor with which we doubt a received confidence value
  p_free_threshold: 0.6 # The threshold for a cell to be considered free
  p_occupied_threshold: 0.4 # The threshold for a cell to be considered occupied
quadtree:
  resolution: 0.2 # The resolution of the quadtree in meters --> will be rounded down to the nearest power of 2 division of the map size
  evaporation_time: 10 # The time in seconds it takes for a pheromone value to evaporate
  evaporated_pheromone_factor: 0.05 # If a cell has ever been explored, the pheromone value will never be lower than this factor of the maximum confidence value (from 0.5)
  merge_max_visited_time_difference: 5 # The maximum time difference in seconds between two quadtree nodes to merge them
  merge_max_confidence_diff: 0.05 # The maximum confidence difference between two quadtree nodes to merge them
battery:
  capacity: 400 # Battery capacity in mAh
sensors:
  position_noise: 10 # Position noise in centimeters (uniform)
  orientation_noise: 5 # Orientation sensor noise in degrees (uniform)
  distance_sensor_noise: 5 # Distance sensor noise in centimeters (uniform)
  distance_sensor_range: 2 # Distance sensor range in meters